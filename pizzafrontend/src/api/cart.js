const API_URL = import.meta.env.VITE_API_URL; // üî• API URL bet√∂lt√©se a k√∂rnyezeti v√°ltoz√≥kb√≥l

/**
 * üîç Kos√°r lek√©r√©se a backendr≈ël adott felhaszn√°l√≥hoz (`userId` alapj√°n)
 */
export async function getCart(userId) {
    if (!userId) {
        console.warn("‚ö† Nincs userId, ez√©rt nem k√©rj√ºk le a kos√°r tartalm√°t.");
        return [];
    }

    try {
        console.log(`üì• Kos√°r lek√©r√©se: ${API_URL}/cart?userId=${userId}`); // Debug log
        const response = await fetch(`${API_URL}/cart?userId=${userId}`);

        if (!response.ok) {
            throw new Error("‚ùå Nem siker√ºlt lek√©rni a kos√°r tartalm√°t.");
        }

        const data = await response.json();
        console.log("‚úÖ Kos√°r adatok sikeresen lek√©rve:", data);
        return data;
    } catch (error) {
        console.error("‚ùå Hiba a kos√°r lek√©r√©sekor:", error);
        return [];
    }
}

/**
 * ‚ùå Pizzat√©tel elt√°vol√≠t√°sa a kos√°rb√≥l (`cartId` alapj√°n)
 */
export async function removeFromCart(cartId) {
    if (!cartId) {
        console.error("‚ö† Hiba: Hi√°nyz√≥ cartId!");
        alert("‚ö† Hiba! Nincs megadva kos√°r azonos√≠t√≥.");
        return false;
    }

    try {
        console.log(`üóë Kos√°r t√©tel t√∂rl√©se: ${API_URL}/cart/${cartId}`); // Debug log
        const response = await fetch(`${API_URL}/cart/${cartId}`, {
            method: "DELETE"
        });

        if (!response.ok) {
            throw new Error("‚ùå Nem siker√ºlt elt√°vol√≠tani a t√©telt a kos√°rb√≥l.");
        }

        console.log("‚úÖ Kos√°r t√©tel sikeresen t√∂r√∂lve!");
        return true;
    } catch (error) {
        console.error("‚ùå Hiba a kos√°rb√≥l val√≥ t√∂rl√©skor:", error);
        return false;
    }
}

/**
 * ‚ûï Pizza hozz√°ad√°sa a kos√°rhoz
 */
export async function addToCart(userId, pizzaId, quantity = 1) {
    console.log("üì§ Kos√°rba helyez√©s (ellen≈ërz√©s):", { userId, pizzaId, quantity }); // Debug log

    // Ha valamelyik azonos√≠t√≥ hi√°nyzik, ne k√ºldj√ºnk API h√≠v√°st
    if (!userId || !pizzaId) {
        console.error("‚ùå Hiba: Hi√°nyz√≥ userId vagy pizzaId!", { userId, pizzaId });
        alert("‚ö† Hiba! Hi√°nyz√≥ felhaszn√°l√≥ vagy pizza azonos√≠t√≥.");
        return;
    }

    // Token ellen≈ërz√©se (ha sz√ºks√©ges)
    const token = localStorage.getItem("token");
    if (!token) {
        console.error("‚ùå Hiba: Hi√°nyz√≥ token! A felhaszn√°l√≥ nincs bejelentkezve.");
        alert("‚ö† Hiba! El≈ësz√∂r jelentkezz be.");
        return;
    }

    try {
        console.log(`üõí Pizza hozz√°ad√°sa a kos√°rhoz: ${API_URL}/cart`); // Debug log
        const response = await fetch(`${API_URL}/cart`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}` // ‚úÖ Token ellen≈ërz√©se
            },
            body: JSON.stringify({
                userId,
                pizzaId,
                quantity
            }),
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`‚ùå Nem siker√ºlt hozz√°adni a pizz√°t a kos√°rhoz: ${errorText}`);
        }

        console.log("‚úÖ Sikeres pizza hozz√°ad√°s a kos√°rhoz!");
        return await response.json();
    } catch (error) {
        console.error("‚ùå Hiba a pizza kos√°rba helyez√©sekor:", error);
        alert("‚ö† Hiba t√∂rt√©nt a pizza kos√°rba helyez√©sekor.");
        throw error;
    }
}

/**
 * ‚úÖ Rendel√©s lead√°sa a backendnek (`userId` alapj√°n)
 */
export async function checkout(userId) {
    if (!userId) {
        console.warn("‚ö† Nincs userId, ez√©rt nem tudjuk leadni a rendel√©st.");
        alert("‚ö† Hiba! Hi√°nyz√≥ felhaszn√°l√≥ azonos√≠t√≥.");
        return;
    }

    try {
        console.log(`üì¶ Rendel√©s lead√°sa: ${API_URL}/orders/checkout?userId=${userId}`); // Debug log
        const response = await fetch(`${API_URL}/orders/checkout?userId=${userId}`, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}` // ‚úÖ Token ellen≈ërz√©se
            }
        });

        if (!response.ok) {
            throw new Error("‚ùå Nem siker√ºlt leadni a rendel√©st.");
        }

        const result = await response.json();
        console.log("‚úÖ Rendel√©s sikeresen leadva!", result);
        return result;
    } catch (error) {
        console.error("‚ùå Hiba a rendel√©s sor√°n:", error);
        alert("‚ö† Hiba t√∂rt√©nt a rendel√©s sor√°n.");
        throw error;
    }
}
